/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.experts.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.experts.model.Question;
import com.liferay.experts.service.AnswerLocalService;
import com.liferay.experts.service.AnswerService;
import com.liferay.experts.service.QuestionAssignmentLocalService;
import com.liferay.experts.service.QuestionAssignmentService;
import com.liferay.experts.service.QuestionLocalService;
import com.liferay.experts.service.QuestionService;
import com.liferay.experts.service.TagAssignmentLocalService;
import com.liferay.experts.service.TagAssignmentService;
import com.liferay.experts.service.persistence.AnswerPersistence;
import com.liferay.experts.service.persistence.QuestionAssignmentPersistence;
import com.liferay.experts.service.persistence.QuestionPersistence;
import com.liferay.experts.service.persistence.TagAssignmentPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.GroupLocalService;
import com.liferay.portal.service.GroupService;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.GroupPersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.AssetEntryLocalService;
import com.liferay.portlet.asset.service.AssetEntryService;
import com.liferay.portlet.asset.service.AssetTagLocalService;
import com.liferay.portlet.asset.service.AssetTagService;
import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the question local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.experts.service.impl.QuestionLocalServiceImpl}.
 * </p>
 *
 * @author Ryan Park
 * @see com.liferay.experts.service.impl.QuestionLocalServiceImpl
 * @see com.liferay.experts.service.QuestionLocalServiceUtil
 * @generated
 */
public abstract class QuestionLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements QuestionLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.experts.service.QuestionLocalServiceUtil} to access the question local service.
	 */

	/**
	 * Adds the question to the database. Also notifies the appropriate model listeners.
	 *
	 * @param question the question
	 * @return the question that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Question addQuestion(Question question) throws SystemException {
		question.setNew(true);

		return questionPersistence.update(question);
	}

	/**
	 * Creates a new question with the primary key. Does not add the question to the database.
	 *
	 * @param questionId the primary key for the new question
	 * @return the new question
	 */
	public Question createQuestion(long questionId) {
		return questionPersistence.create(questionId);
	}

	/**
	 * Deletes the question with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param questionId the primary key of the question
	 * @return the question that was removed
	 * @throws PortalException if a question with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Question deleteQuestion(long questionId)
		throws PortalException, SystemException {
		return questionPersistence.remove(questionId);
	}

	/**
	 * Deletes the question from the database. Also notifies the appropriate model listeners.
	 *
	 * @param question the question
	 * @return the question that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Question deleteQuestion(Question question) throws SystemException {
		return questionPersistence.remove(question);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Question.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return questionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return questionPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return questionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return questionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public Question fetchQuestion(long questionId) throws SystemException {
		return questionPersistence.fetchByPrimaryKey(questionId);
	}

	/**
	 * Returns the question with the primary key.
	 *
	 * @param questionId the primary key of the question
	 * @return the question
	 * @throws PortalException if a question with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Question getQuestion(long questionId)
		throws PortalException, SystemException {
		return questionPersistence.findByPrimaryKey(questionId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return questionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the questions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of questions
	 * @param end the upper bound of the range of questions (not inclusive)
	 * @return the range of questions
	 * @throws SystemException if a system exception occurred
	 */
	public List<Question> getQuestions(int start, int end)
		throws SystemException {
		return questionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of questions.
	 *
	 * @return the number of questions
	 * @throws SystemException if a system exception occurred
	 */
	public int getQuestionsCount() throws SystemException {
		return questionPersistence.countAll();
	}

	/**
	 * Updates the question in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param question the question
	 * @return the question that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Question updateQuestion(Question question) throws SystemException {
		return questionPersistence.update(question);
	}

	/**
	 * Returns the answer local service.
	 *
	 * @return the answer local service
	 */
	public AnswerLocalService getAnswerLocalService() {
		return answerLocalService;
	}

	/**
	 * Sets the answer local service.
	 *
	 * @param answerLocalService the answer local service
	 */
	public void setAnswerLocalService(AnswerLocalService answerLocalService) {
		this.answerLocalService = answerLocalService;
	}

	/**
	 * Returns the answer remote service.
	 *
	 * @return the answer remote service
	 */
	public AnswerService getAnswerService() {
		return answerService;
	}

	/**
	 * Sets the answer remote service.
	 *
	 * @param answerService the answer remote service
	 */
	public void setAnswerService(AnswerService answerService) {
		this.answerService = answerService;
	}

	/**
	 * Returns the answer persistence.
	 *
	 * @return the answer persistence
	 */
	public AnswerPersistence getAnswerPersistence() {
		return answerPersistence;
	}

	/**
	 * Sets the answer persistence.
	 *
	 * @param answerPersistence the answer persistence
	 */
	public void setAnswerPersistence(AnswerPersistence answerPersistence) {
		this.answerPersistence = answerPersistence;
	}

	/**
	 * Returns the question local service.
	 *
	 * @return the question local service
	 */
	public QuestionLocalService getQuestionLocalService() {
		return questionLocalService;
	}

	/**
	 * Sets the question local service.
	 *
	 * @param questionLocalService the question local service
	 */
	public void setQuestionLocalService(
		QuestionLocalService questionLocalService) {
		this.questionLocalService = questionLocalService;
	}

	/**
	 * Returns the question remote service.
	 *
	 * @return the question remote service
	 */
	public QuestionService getQuestionService() {
		return questionService;
	}

	/**
	 * Sets the question remote service.
	 *
	 * @param questionService the question remote service
	 */
	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}

	/**
	 * Returns the question persistence.
	 *
	 * @return the question persistence
	 */
	public QuestionPersistence getQuestionPersistence() {
		return questionPersistence;
	}

	/**
	 * Sets the question persistence.
	 *
	 * @param questionPersistence the question persistence
	 */
	public void setQuestionPersistence(QuestionPersistence questionPersistence) {
		this.questionPersistence = questionPersistence;
	}

	/**
	 * Returns the question assignment local service.
	 *
	 * @return the question assignment local service
	 */
	public QuestionAssignmentLocalService getQuestionAssignmentLocalService() {
		return questionAssignmentLocalService;
	}

	/**
	 * Sets the question assignment local service.
	 *
	 * @param questionAssignmentLocalService the question assignment local service
	 */
	public void setQuestionAssignmentLocalService(
		QuestionAssignmentLocalService questionAssignmentLocalService) {
		this.questionAssignmentLocalService = questionAssignmentLocalService;
	}

	/**
	 * Returns the question assignment remote service.
	 *
	 * @return the question assignment remote service
	 */
	public QuestionAssignmentService getQuestionAssignmentService() {
		return questionAssignmentService;
	}

	/**
	 * Sets the question assignment remote service.
	 *
	 * @param questionAssignmentService the question assignment remote service
	 */
	public void setQuestionAssignmentService(
		QuestionAssignmentService questionAssignmentService) {
		this.questionAssignmentService = questionAssignmentService;
	}

	/**
	 * Returns the question assignment persistence.
	 *
	 * @return the question assignment persistence
	 */
	public QuestionAssignmentPersistence getQuestionAssignmentPersistence() {
		return questionAssignmentPersistence;
	}

	/**
	 * Sets the question assignment persistence.
	 *
	 * @param questionAssignmentPersistence the question assignment persistence
	 */
	public void setQuestionAssignmentPersistence(
		QuestionAssignmentPersistence questionAssignmentPersistence) {
		this.questionAssignmentPersistence = questionAssignmentPersistence;
	}

	/**
	 * Returns the tag assignment local service.
	 *
	 * @return the tag assignment local service
	 */
	public TagAssignmentLocalService getTagAssignmentLocalService() {
		return tagAssignmentLocalService;
	}

	/**
	 * Sets the tag assignment local service.
	 *
	 * @param tagAssignmentLocalService the tag assignment local service
	 */
	public void setTagAssignmentLocalService(
		TagAssignmentLocalService tagAssignmentLocalService) {
		this.tagAssignmentLocalService = tagAssignmentLocalService;
	}

	/**
	 * Returns the tag assignment remote service.
	 *
	 * @return the tag assignment remote service
	 */
	public TagAssignmentService getTagAssignmentService() {
		return tagAssignmentService;
	}

	/**
	 * Sets the tag assignment remote service.
	 *
	 * @param tagAssignmentService the tag assignment remote service
	 */
	public void setTagAssignmentService(
		TagAssignmentService tagAssignmentService) {
		this.tagAssignmentService = tagAssignmentService;
	}

	/**
	 * Returns the tag assignment persistence.
	 *
	 * @return the tag assignment persistence
	 */
	public TagAssignmentPersistence getTagAssignmentPersistence() {
		return tagAssignmentPersistence;
	}

	/**
	 * Sets the tag assignment persistence.
	 *
	 * @param tagAssignmentPersistence the tag assignment persistence
	 */
	public void setTagAssignmentPersistence(
		TagAssignmentPersistence tagAssignmentPersistence) {
		this.tagAssignmentPersistence = tagAssignmentPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the group local service.
	 *
	 * @return the group local service
	 */
	public GroupLocalService getGroupLocalService() {
		return groupLocalService;
	}

	/**
	 * Sets the group local service.
	 *
	 * @param groupLocalService the group local service
	 */
	public void setGroupLocalService(GroupLocalService groupLocalService) {
		this.groupLocalService = groupLocalService;
	}

	/**
	 * Returns the group remote service.
	 *
	 * @return the group remote service
	 */
	public GroupService getGroupService() {
		return groupService;
	}

	/**
	 * Sets the group remote service.
	 *
	 * @param groupService the group remote service
	 */
	public void setGroupService(GroupService groupService) {
		this.groupService = groupService;
	}

	/**
	 * Returns the group persistence.
	 *
	 * @return the group persistence
	 */
	public GroupPersistence getGroupPersistence() {
		return groupPersistence;
	}

	/**
	 * Sets the group persistence.
	 *
	 * @param groupPersistence the group persistence
	 */
	public void setGroupPersistence(GroupPersistence groupPersistence) {
		this.groupPersistence = groupPersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry remote service.
	 *
	 * @return the asset entry remote service
	 */
	public AssetEntryService getAssetEntryService() {
		return assetEntryService;
	}

	/**
	 * Sets the asset entry remote service.
	 *
	 * @param assetEntryService the asset entry remote service
	 */
	public void setAssetEntryService(AssetEntryService assetEntryService) {
		this.assetEntryService = assetEntryService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset tag local service.
	 *
	 * @return the asset tag local service
	 */
	public AssetTagLocalService getAssetTagLocalService() {
		return assetTagLocalService;
	}

	/**
	 * Sets the asset tag local service.
	 *
	 * @param assetTagLocalService the asset tag local service
	 */
	public void setAssetTagLocalService(
		AssetTagLocalService assetTagLocalService) {
		this.assetTagLocalService = assetTagLocalService;
	}

	/**
	 * Returns the asset tag remote service.
	 *
	 * @return the asset tag remote service
	 */
	public AssetTagService getAssetTagService() {
		return assetTagService;
	}

	/**
	 * Sets the asset tag remote service.
	 *
	 * @param assetTagService the asset tag remote service
	 */
	public void setAssetTagService(AssetTagService assetTagService) {
		this.assetTagService = assetTagService;
	}

	/**
	 * Returns the asset tag persistence.
	 *
	 * @return the asset tag persistence
	 */
	public AssetTagPersistence getAssetTagPersistence() {
		return assetTagPersistence;
	}

	/**
	 * Sets the asset tag persistence.
	 *
	 * @param assetTagPersistence the asset tag persistence
	 */
	public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
		this.assetTagPersistence = assetTagPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.experts.model.Question",
			questionLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.experts.model.Question");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Question.class;
	}

	protected String getModelClassName() {
		return Question.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = questionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AnswerLocalService.class)
	protected AnswerLocalService answerLocalService;
	@BeanReference(type = AnswerService.class)
	protected AnswerService answerService;
	@BeanReference(type = AnswerPersistence.class)
	protected AnswerPersistence answerPersistence;
	@BeanReference(type = QuestionLocalService.class)
	protected QuestionLocalService questionLocalService;
	@BeanReference(type = QuestionService.class)
	protected QuestionService questionService;
	@BeanReference(type = QuestionPersistence.class)
	protected QuestionPersistence questionPersistence;
	@BeanReference(type = QuestionAssignmentLocalService.class)
	protected QuestionAssignmentLocalService questionAssignmentLocalService;
	@BeanReference(type = QuestionAssignmentService.class)
	protected QuestionAssignmentService questionAssignmentService;
	@BeanReference(type = QuestionAssignmentPersistence.class)
	protected QuestionAssignmentPersistence questionAssignmentPersistence;
	@BeanReference(type = TagAssignmentLocalService.class)
	protected TagAssignmentLocalService tagAssignmentLocalService;
	@BeanReference(type = TagAssignmentService.class)
	protected TagAssignmentService tagAssignmentService;
	@BeanReference(type = TagAssignmentPersistence.class)
	protected TagAssignmentPersistence tagAssignmentPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = GroupLocalService.class)
	protected GroupLocalService groupLocalService;
	@BeanReference(type = GroupService.class)
	protected GroupService groupService;
	@BeanReference(type = GroupPersistence.class)
	protected GroupPersistence groupPersistence;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = AssetEntryLocalService.class)
	protected AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = AssetEntryService.class)
	protected AssetEntryService assetEntryService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@BeanReference(type = AssetTagLocalService.class)
	protected AssetTagLocalService assetTagLocalService;
	@BeanReference(type = AssetTagService.class)
	protected AssetTagService assetTagService;
	@BeanReference(type = AssetTagPersistence.class)
	protected AssetTagPersistence assetTagPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private QuestionLocalServiceClpInvoker _clpInvoker = new QuestionLocalServiceClpInvoker();
}